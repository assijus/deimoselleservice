package com.crivano.demoiselle.rest.server;

import org.json.JSONException;

import com.crivano.blucservice.api.IBlueCrystal;
import com.crivano.blucservice.api.IBlueCrystal.CertDetails;
import com.crivano.blucservice.api.IBlueCrystal.CertificatePostRequest;
import com.crivano.blucservice.api.IBlueCrystal.CertificatePostResponse;
import com.crivano.blucservice.api.IBlueCrystal.EnvelopePostRequest;
import com.crivano.blucservice.api.IBlueCrystal.EnvelopePostResponse;
import com.crivano.blucservice.api.IBlueCrystal.HashPostRequest;
import com.crivano.blucservice.api.IBlueCrystal.HashPostResponse;
import com.crivano.blucservice.api.IBlueCrystal.ValidatePostRequest;
import com.crivano.blucservice.api.IBlueCrystal.ValidatePostResponse;
import com.crivano.swaggerservlet.SwaggerTestSupport;
import com.crivano.swaggerservlet.SwaggerUtils;

public class DemoiselleServiceTest extends SwaggerTestSupport {

	String fileADRB23 = "";
	String certificateADRB23 = "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";
	String timeADRB23 = "2022-03-29T14:50:25.453-03:00";
	String sha1ADRB23 = "/IDVmHe0riGRFZG1NmSy2hMkzyU=";
	String sha256ADRB23 = "YL3RPqSCe43jdcedw/+Ef4O1W9c7ZGFSP9+PhDtaDVs=";
	String hashADRB23 = "MYIBqTAYBgkqhkiG9w0BCQMxCwYJKoZIhvcNAQcBMBwGCSqGSIb3DQEJBTEPFw0yMjAzMjkxNzUwMjVaMC8GCSqGSIb3DQEJBDEiBCBgvdE+pIJ7jeN1x53D/4R/g7Vb1ztkYVI/34+EO1oNWzCBlAYLKoZIhvcNAQkQAg8xgYQwgYEGCGBMAQcBAQIDMC8wCwYJYIZIAWUDBAIBBCCxboi793MipnmVt5B4d47T0Op8iFh7b21Ri3Fej3aj1TBEMEIGCyqGSIb3DQEJEAUBFjNodHRwOi8vcG9saXRpY2FzLmljcGJyYXNpbC5nb3YuYnIvUEFfQURfUkJfdjJfMy5kZXIwgaYGCyqGSIb3DQEJEAIvMYGWMIGTMIGQMIGNBCCeoeW8mQGEzRKWG7WaCujdXsd4rMJwz0XdWy91u1/FaDBpMF2kWzBZMQswCQYDVQQGEwJCUjETMBEGA1UEChMKSUNQLUJyYXNpbDEVMBMGA1UECxMMQUMgU09MVVRJIHY1MR4wHAYDVQQDExVBQyBTT0xVVEkgTXVsdGlwbGEgdjUCCBHeIQYHUaYc";
	String signatureADRB23 = "g7vnjduIA0ON3R2cSp1vStHzUfhbOZ50OyRR3Hfh7t38Q40qFwzs8cRbf4z9AVlQlqCepw0rlhMv0EG/dnpSuCoOQlCfcUET72uAdlfj5oUNHKJavq0uTbRv6cVEXp1h/SSeFNwcaT+ImbTIwP/Q/lMhm1/buTNwPaFnxvNWrXL7+ykzVl9yGM+Q6xImhLrDlWjuDaG58Ar/iNNJ9er1QJdMfo4i6gWmG4cVOIqSB1Uuy4eKCdtjX1rpem6yy5PKuhZ0g182DaBSIjIaMd3vbLwChTjGR0d5zTWE0M2vLY9vf4UwJr9w/f32wvD9CbLRLyy7Szstsx9koBoScZCguA==";
	String envelopeADRB23 = "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";

	@Override
	protected String getPackage() {
		return "com.crivano.demoiselle.rest.server";
	}

	@Override
	protected Class getAPI() {
		return IBlueCrystal.class;
	}

	public void testCertificate_Simple_Success() throws JSONException {
		CertificatePostRequest req = new CertificatePostRequest();
		CertificatePostResponse resp = new CertificatePostResponse();

		req.certificate = SwaggerUtils.base64Decode(certificateADRB23);
		run("POST", "/certificate", req, resp);

		assertEquals("RENATO DO AMARAL CRIVANO MACHADO:00489623760", resp.cn);
		assertEquals(
				"CN=RENATO DO AMARAL CRIVANO MACHADO:00489623760, OU=Certificado PF A1, OU=Videoconferencia, OU=09461647000195, OU=AC SOLUTI Multipla v5, O=ICP-Brasil, C=BR",
				resp.subject);
		assertEquals("RENATO DO AMARAL CRIVANO MACHADO", resp.name);
		assertEquals("00489623760", resp.cpf);
		assertEquals(resp.certdetails.cpf0, resp.cpf);
	}

	public void testCertificateADRB23_Simple_Success() throws JSONException {
		CertificatePostRequest req = new CertificatePostRequest();
		CertificatePostResponse resp = new CertificatePostResponse();

		req.certificate = SwaggerUtils.base64Decode(certificateADRB23);
		run("POST", "/certificate", req, resp);

		assertEquals("RENATO DO AMARAL CRIVANO MACHADO:00489623760", resp.cn);
		assertEquals(
				"CN=RENATO DO AMARAL CRIVANO MACHADO:00489623760, OU=Certificado PF A1, OU=Videoconferencia, OU=09461647000195, OU=AC SOLUTI Multipla v5, O=ICP-Brasil, C=BR",
				resp.subject);
		assertEquals("RENATO DO AMARAL CRIVANO MACHADO", resp.name);
		assertEquals("00489623760", resp.cpf);
		assertEquals(resp.certdetails.cpf0, resp.cpf);
	}

	public void testHash_ADRB23_Success() throws JSONException {
		HashPostRequest req = new HashPostRequest();
		HashPostResponse resp = new HashPostResponse();

		req.certificate = SwaggerUtils.base64Decode(certificateADRB23);
		req.policy = "AD-RB";
		req.sha1 = SwaggerUtils.base64Decode(sha1ADRB23);
		req.sha256 = SwaggerUtils.base64Decode(sha256ADRB23);
		req.time = javax.xml.bind.DatatypeConverter.parseDateTime(timeADRB23).getTime();
		req.crl = false;
		run("POST", "/hash", req, resp);

		assertEquals(hashADRB23, SwaggerUtils.base64Encode(resp.hash));
		assertEquals("RENATO DO AMARAL CRIVANO MACHADO:00489623760", resp.cn);
		assertEquals("AD-RB", resp.policy);
		assertEquals("2.16.76.1.7.1.1.2.3", resp.policyoid);
		assertEquals("2.3", resp.policyversion);
		assertTrue(resp.certdetails instanceof CertDetails);
		// assertTrue(resp.error == null);
	}

	public void testEnvelope_ADRB23_Success() throws JSONException {
		EnvelopePostRequest req = new EnvelopePostRequest();
		EnvelopePostResponse resp = new EnvelopePostResponse();

		req.certificate = SwaggerUtils.base64Decode(certificateADRB23);
		req.policy = "AD-RB";
		req.signature = SwaggerUtils.base64Decode(signatureADRB23);
		req.sha1 = SwaggerUtils.base64Decode(sha1ADRB23);
		req.sha256 = SwaggerUtils.base64Decode(sha256ADRB23);
		req.time = javax.xml.bind.DatatypeConverter.parseDateTime(timeADRB23).getTime();
		req.crl = false;

		run("POST", "/envelope", req, resp);

		assertEquals(envelopeADRB23, SwaggerUtils.base64Encode(resp.envelope));
		assertEquals("RENATO DO AMARAL CRIVANO MACHADO:00489623760", resp.cn);
		assertEquals("AD-RB", resp.policy);
		assertEquals("2.16.76.1.7.1.1.2.3", resp.policyoid);
		assertEquals("2.3", resp.policyversion);
		assertTrue(resp.certdetails instanceof CertDetails);
	}

	public void testValidate_ADRB23_Success() throws JSONException {
		ValidatePostRequest req = new ValidatePostRequest();
		ValidatePostResponse resp = new ValidatePostResponse();

		setProperty("threadpool.size", "20");

		req.envelope = SwaggerUtils.base64Decode(envelopeADRB23);
		req.sha1 = SwaggerUtils.base64Decode(sha1ADRB23);
		req.sha256 = SwaggerUtils.base64Decode(sha256ADRB23);
		req.time = javax.xml.bind.DatatypeConverter.parseDateTime(timeADRB23).getTime();
		req.crl = false;
		run("POST", "/validate", req, resp);

		// TODO: trocar por "name"
		assertEquals("RENATO DO AMARAL CRIVANO MACHADO", resp.cn);
		assertEquals("AD-RB", resp.policy);
		assertEquals("2.16.76.1.7.1.1.2.3", resp.policyoid);
		assertEquals("2.3", resp.policyversion);
		assertTrue(resp.certdetails instanceof CertDetails);
		assertTrue(resp.errormsg == null);
	}

}
