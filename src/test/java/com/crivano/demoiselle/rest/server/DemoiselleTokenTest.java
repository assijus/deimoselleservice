package com.crivano.demoiselle.rest.server;

import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.Base64;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.demoiselle.signer.core.ca.manager.CAManagerConfiguration;
import org.demoiselle.signer.core.extension.BasicCertificate;
import org.demoiselle.signer.core.extension.CertificateExtra;
import org.demoiselle.signer.core.repository.ConfigurationRepo;
import org.demoiselle.signer.policy.impl.cades.SignatureInformations;
import org.demoiselle.signer.policy.impl.cades.SignerAlgorithmEnum;
import org.demoiselle.signer.policy.impl.cades.pkcs7.impl.CAdESChecker;

import com.crivano.blucservice.api.IBlueCrystal;
import com.crivano.swaggerservlet.SwaggerTestSupport;
import com.crivano.swaggerservlet.SwaggerUtils;

public class DemoiselleTokenTest extends SwaggerTestSupport {
	String token = "TOKEN-2022-03-28T13:09:41.596-03:00;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";

	@Override
	protected String getPackage() {
		return "com.crivano.demoiselle.rest.server";
	}

	@Override
	protected Class getAPI() {
		return IBlueCrystal.class;
	}

	/**
	 * Verifica assinatura desanexada do arquivo
	 */
	public void testVerifyDetachedSignature() {
		String fileToVerifyDirName = "/";
		String fileSignatureDirName = "/";

		byte[] fileToVerify;
		byte[] signatureFile;
		fileToVerify = Base64.getDecoder().decode("VGVzdGUgQXNzaW5hdHVyYQo=");
		signatureFile = Base64.getDecoder().decode(
				"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");

//		String token = "TOKEN-2022-03-28T13:09:41.596-03:00";
//		fileToVerify = token.getBytes();
//		signatureFile = Base64.getDecoder().decode(
//				"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");
		// Caso informe o arquivo descomentar abaixo
		// fileToVerify = readContent(fileToVerifyDirName);
		// signatureFile = readContent(fileSignatureDirName);

		// Configura cache do demoseille signer:
		CAManagerConfiguration config = CAManagerConfiguration.getInstance();
		config.setCached(true);

		// Cache LCR
		ConfigurationRepo configlcr = ConfigurationRepo.getInstance();
		configlcr.setCrlIndex(".crl_index");
		System.setProperty("signer.repository.crl.path", "/tmp/lcrs");
		configlcr.setCrlPath("/tmp/lcrs");
		configlcr.setOnline(false);
		System.setProperty("lcr.manager.sync.strategy", "REPLICATE");

		// cache interno
		/*
		 * try { CMSSignedData cms = new CMSSignedData(new
		 * CMSProcessableByteArray(fileToVerify),signatureFile); SignerInformation
		 * signerInfo = (SignerInformation)
		 * cms.getSignerInfos().getSigners().iterator().next(); X509CertificateHolder
		 * certificateHolder = (X509CertificateHolder)
		 * cms.getCertificates().getMatches(signerInfo.getSID()) .iterator().next();
		 * X509Certificate varCert;
		 * 
		 * varCert = new
		 * JcaX509CertificateConverter().getCertificate(certificateHolder);
		 * LcrManagerSync lMS= LcrManagerSync.getInstance(); lMS.update(varCert);
		 * 
		 * 
		 * 
		 * } catch (CertificateException e) { e.printStackTrace(); } catch
		 * (LcrManagerSyncException e) { e.printStackTrace(); } catch (CMSException e) {
		 * e.printStackTrace(); }
		 */

		CAdESChecker checker = new CAdESChecker();

		System.out.println("Efetuando a validacao da assinatura");
//		List<SignatureInformations> signaturesInfo = checker.checkDetachedSignature(fileToVerify, signatureFile);

		Map<String, byte[]> hashes = new HashMap<>();
		hashes.put(SignerAlgorithmEnum.SHA1withRSA.getOIDAlgorithmHash(), calcSha1(fileToVerify));
		hashes.put(SignerAlgorithmEnum.SHA256withRSA.getOIDAlgorithmHash(), calcSha256(fileToVerify));
		hashes.put(SignerAlgorithmEnum.SHA512withRSA.getOIDAlgorithmHash(), calcSha512(fileToVerify));
		List<SignatureInformations> signaturesInfo = checker.checkSignatureByHashes(hashes, signatureFile);

		if (signaturesInfo != null) {
			System.out.println("A assinatura foi validada. e retornou resultados");
			for (SignatureInformations si : signaturesInfo) {
				System.out.println(si.getSignDate());
				if (si.getTimeStampSigner() != null) {
					System.out.println("Serial" + si.getTimeStampSigner().toString());
				}
				System.out.println("informações do assinante:");
				BasicCertificate certificate = si.getIcpBrasilcertificate();
				if (!certificate.isCACertificate()) {
					if (certificate.hasCertificatePF()) {
						System.out.println("CPF: " + certificate.getICPBRCertificatePF().getCPF());
						System.out.println(
								"Titulo de Eleitor: " + certificate.getICPBRCertificatePF().getElectoralDocument());
					}
					if (certificate.hasCertificatePJ()) {
						System.out.println("CNPJ: " + certificate.getICPBRCertificatePJ().getCNPJ());
					}
				}
				// Carimbo do tempo
				if (si.getTimeStampSigner() != null) {

					System.out.println(si.getTimeStampSigner().toString());
				}
				// A assinatura pode estar correta mas não foi possível verificar algum
				// atributo exigido pela ICP-Brasil
				for (String valErr : si.getValidatorErrors()) {
					System.err.println("++++++++++++++ ERROS ++++++++++++++++++");
					System.err.println(valErr);
				}
				// A assinatura pode estar correta mas não foi possível verificar alguma
				// condição de validação exigida pela ICP-Brasil
				for (String valWarn : si.getValidatorWarnins()) {
					System.err.println("++++++++++++++ AVISOS ++++++++++++++++++");
					System.err.println(valWarn);
				}

			}
			assertTrue(true);

		} else {
			System.err.println("A assinatura foi invalidada!");
			assertTrue(false);
		}
	}

	public void testToken_Simple_Success() throws Exception {
		String tokenAsString = token.split(";")[0];
		if (!tokenAsString.startsWith("TOKEN-"))
			throw new Exception("Token não está no formato correto.");
		byte[] tokenAsBytes = tokenAsString.getBytes("UTF-8");
		String dateAsString = tokenAsString.substring(6);
		Date date = SwaggerUtils.dateAdapter.parse(dateAsString);
		if (date == null)
			throw new Exception("Data do token não está no formato correto.");
		String signB64 = token.split(";")[1];
		if (signB64 == null)
			throw new Exception("Assinatura do token não foi encontrada.");

		// Validate: call bluc-server validate webservice. If there is an error,
		// it will throw an exception.
		IBlueCrystal.IValidatePost.Request q = new IBlueCrystal.IValidatePost.Request();
		q.time = SwaggerUtils.dateAdapter.parse(dateAsString);
		q.sha1 = calcSha1(tokenAsBytes);
		q.sha256 = calcSha256(tokenAsBytes);
		q.crl = true;
		q.envelope = SwaggerUtils.base64Decode(signB64);

		byte[] fileToVerify;
		byte[] signatureFile;
		fileToVerify = Base64.getDecoder().decode("VGVzdGUgQXNzaW5hdHVyYQo=");
		signatureFile = Base64.getDecoder().decode(
				"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");

		// Configura cache do demoseille signer:
		CAManagerConfiguration config = CAManagerConfiguration.getInstance();
		config.setCached(true);

		// Cache LCR
		ConfigurationRepo configlcr = ConfigurationRepo.getInstance();
		configlcr.setCrlIndex(".crl_index");
		System.setProperty("signer.repository.crl.path", "/tmp/lcrs");
		configlcr.setCrlPath("/tmp/lcrs");
		configlcr.setOnline(false);
		System.setProperty("lcr.manager.sync.strategy", "REPLICATE");

		System.out.println("Efetuando a validacao da assinatura");
		CAdESChecker checker = new CAdESChecker();
		List<SignatureInformations> signaturesInfo = checker.checkDetachedSignature(fileToVerify, signatureFile);

//		List<SignatureInformations> signaturesInfo = checker.checkSignatureByHash(
//				SignerAlgorithmEnum.SHA256withRSA.getOIDAlgorithmHash(), q.sha256, q.envelope);

		SignatureInformations si = signaturesInfo.get(0);

		CertificateExtra ce = new CertificateExtra(si.getIcpBrasilcertificate().getX509Certificate());

//		ValidatePostResponse resp = new ValidatePostResponse();
//		run("POST", "/validate", q, resp);
	}

	public static byte[] calcSha1(byte[] content) {
		MessageDigest md;
		try {
			md = MessageDigest.getInstance("SHA-1");
		} catch (NoSuchAlgorithmException e) {
			throw new RuntimeException(e);
		}
		md.reset();
		md.update(content);
		byte[] output = md.digest();
		return output;
	}

	public static byte[] calcSha256(byte[] content) {
		MessageDigest md;
		try {
			md = MessageDigest.getInstance("SHA-256");
		} catch (NoSuchAlgorithmException e) {
			throw new RuntimeException(e);
		}
		md.reset();
		md.update(content);
		byte[] output = md.digest();
		return output;
	}

	public static byte[] calcSha512(byte[] content) {
		MessageDigest md;
		try {
			md = MessageDigest.getInstance("SHA-512");
		} catch (NoSuchAlgorithmException e) {
			throw new RuntimeException(e);
		}
		md.reset();
		md.update(content);
		byte[] output = md.digest();
		return output;
	}

}
